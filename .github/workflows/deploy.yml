name: Deploy to Developer Org and Run Tests

on:
  push:
    branches:
      - main

jobs:
  # === JOB 1: デプロイを実行するジョブ ===
  deploy:
    runs-on: ubuntu-latest

    # ApexEloquentをsubModulesでインストールしているのでソースコードとして取得できるようにする
    steps:
      - name: Checkout source and submodules
        uses: actions/checkout@v4
        with:
          # 履歴を取得(差分XML作成に必要)
          fetch-depth: 0
          submodules: 'recursive'

      # Salsforce CLI のインストール
      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli

      # プラグインを事前に信頼済みホワイトリストに入れておく
      # 参考: https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_allowlist.htm
      - name: Trust sfdx-git-delta plugin
        run: |
          mkdir -p $HOME/.config/sf
          echo '["sfdx-git-delta"]' > $HOME/.config/sf/unsignedPluginAllowList.json

      # 差分からデプロイ用XML自動生成プラグインをインストール
      - name: Install git-delta plugin
        run: sf plugins install sfdx-git-delta
     
      # 認証キーをSECRETから生成
      - name: Create JWT key file
        run: |
          mkdir -p assets
          echo "${{ secrets.SF_JWT_KEY }}" > assets/server.key

      # 組織への認証
      - name: Authenticate to Org
        run: |
          USERNAME_SECRET=""
          if [ "${{ github.ref_name }}" == "staging" ]; then
            USERNAME_SECRET="${{ secrets.SF_USERNAME }}"
          elif [ "${{ github.ref_name }}" == "main" ]; then
            USERNAME_SECRET="${{ secrets.SF_USERNAME }}"
          fi
          sf org login jwt \
            --username "$USERNAME_SECRET" \
            --client-id ${{ secrets.SF_CLIENT_ID }} \
            --jwt-key-file assets/server.key \
            --alias deployOrg

      # 差分のXMLを出力するディレクトリを作成
      - name: Create output directory
        run: mkdir -p ./output

      # 差分のXMLを生成
      - name: Generate package from Git Diff
        id: delta_generator
        run: |
          # Use HEAD~1 as the 'from' commit to be resilient to force-pushes
          # This compares the latest commit with its first parent
          sf sgd source delta \
            --to HEAD \
            --from HEAD~1 \
            --output-dir ./output      

      # 差分があるかをチェックする
      - name: Check for changes to deploy
        id: check_changes
        run: |
          ADD_CHANGES=false
          DELETE_CHANGES=false
          # 1. 追加・更新があるかチェック
          if [ -f "./output/package/package.xml" ] && grep -q '<types>' ./output/package/package.xml; then
            ADD_CHANGES=true
          fi
          # 2. 削除があるかチェック
          if [ -f "./output/destructiveChange/destructiveChanges.xml" ] && grep -q '<types>' ./output/destructiveChange/destructiveChanges.xml; then
            DELETE_CHANGES=true
          fi
          # 3. 結果を後続のステップで使えるように出力
          echo "add_changes=$ADD_CHANGES" >> $GITHUB_OUTPUT
          echo "delete_changes=$DELETE_CHANGES" >> $GITHUB_OUTPUT
          if [ "$ADD_CHANGES" = true ] || [ "$DELETE_CHANGES" = true ]; then
            echo "changes_exist=true" >> $GITHUB_OUTPUT
          else
            echo "changes_exist=false" >> $GITHUB_OUTPUT
          fi

      # 組織へのデプロイ開始
      # 3つのデプロイシナリオに応じてコマンドを分離
      # --test-level RunLocalTests \
      - name: Deploy Additions and Deletions
        if: steps.check_changes.outputs.add_changes == 'true' && steps.check_changes.outputs.delete_changes == 'true'
        run: |
          echo "Deploying additions and deletions..."
          sf project deploy start \
            --manifest ./output/package/package.xml \
            --post-destructive-changes ./output/destructiveChange/destructiveChanges.xml \
            --target-org deployOrg

      - name: Deploy Additions/Updates Only
        if: steps.check_changes.outputs.add_changes == 'true' && steps.check_changes.outputs.delete_changes == 'false'
        run: |
          echo "Deploying additions/updates only..."
          sf project deploy start \
            --manifest ./output/package/package.xml \
            --target-org deployOrg

      - name: Deploy Deletions Only
        if: steps.check_changes.outputs.delete_changes == 'true' && steps.check_changes.outputs.add_changes == 'false'
        run: |
          echo "Deploying deletions only..."
          sf project deploy start \
            --manifest ./output/destructiveChange/package.xml \
            --post-destructive-changes ./output/destructiveChange/destructiveChanges.xml \
            --target-org deployOrg

      # デプロイ対象がなかった時は処理終了
      - name: No changes to deploy
        if: steps.check_changes.outputs.changes_exist == 'false'
        run: echo "No metadata changes detected. Skipping deployment."

  # JOB 2: デプロイが失敗した場合にのみ実行されるジョブ
  revert_on_failure:
    runs-on: ubuntu-latest
    needs: deploy # deployジョブの完了を待つ
    if: failure()  # deployジョブが失敗した場合にのみ、このジョブ全体を実行する

    permissions:
      contents: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          # Actionsボットとしてpushするためにトークンを設定
          token: ${{ secrets.GITHUB_TOKEN }}
          # 履歴を取得(revert PRを作るのに必要)
          fetch-depth: 0

      - name: Revert merge on failure
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # マージコミットをrevertするには -m 1 オプションが必須
          git revert -m 1 HEAD --no-edit
          # revertコミットのメッセージに [skip ci] を追加して、無限ループを防ぐ
          git commit --amend -m "$(git log -1 --pretty=%B) [skip ci]"
          git push
